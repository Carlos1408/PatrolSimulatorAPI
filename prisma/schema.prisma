// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @unique @default(uuid())
  //userKey String @default(uuid())
  username String   @unique @default("")
  name     String
  lastName String
  email    String   @unique
  password String
  status   String   @default("active")
  rank     String   @default("Est")
  ffaa     String   @default("")
  created  DateTime @default(now())
  update   DateTime @updatedAt

  patrols Patrol[]

  roles user_roles[]
}

model Role {
  id   String @id @unique @default(uuid())
  name String

  users user_roles[]
}

model user_roles {
  fk_user String
  user    User   @relation(fields: [fk_user], references: [id], onDelete: Cascade)

  fk_role String
  role    Role   @relation(fields: [fk_role], references: [id], onDelete: Cascade)

  @@id([fk_user, fk_role])
}

model Map {
  id      String @id @unique @default(uuid())
  //mapKey String @default(uuid())
  name    String
  weather String
  type    String @default("Recognition")

  patrols Patrol[]
}

model Patrol {
  id           String   @id @unique @default(uuid())
  //patrolKey String @default(uuid())
  created      DateTime @default(now())
  update       DateTime @updatedAt
  totalSeconds Int      @default(0)

  fk_user String
  user    User   @relation(fields: [fk_user], references: [id], onDelete: Cascade)

  fk_map String
  map    Map    @relation(fields: [fk_map], references: [id], onDelete: Cascade)

  patrolTask PatrolTask?

  recognition Recognition?

  recognitionResult RecognitionResult?

  ambushResult AmbushResult?

  combatResult CombatResult?
}

model PatrolTask {
  id        String   @id @unique @default(uuid())
  //taskKey String
  output    Boolean  @default(false)
  pri       Boolean  @default(false)
  pc        Boolean  @default(false)
  formation Boolean  @default(false)
  pp        Boolean  @default(false)
  px        Boolean  @default(false)
  boxPx     Boolean  @default(false)
  proPx     Boolean  @default(false)
  pro       Boolean  @default(false)
  clover    Boolean  @default(false)
  pd        Boolean  @default(false)
  target    Boolean  @default(false)
  prdo      Boolean  @default(false)
  created   DateTime @default(now())
  update    DateTime @updatedAt

  fk_patrol String @unique
  patrol    Patrol @relation(fields: [fk_patrol], references: [id], onDelete: Cascade)
}

model Recognition {
  id               String  @id @unique @default(uuid())
  //recognitionKey String
  watchtowers      Int     @default(0)
  tank             Int     @default(0)
  helicopter       Int     @default(0)
  alternativeRoute Boolean @default(false)
  mortar           Int     @default(0)
  jeep             Int     @default(0)

  fk_patrol String @unique
  patrol    Patrol @relation(fields: [fk_patrol], references: [id], onDelete: Cascade)
}

model RecognitionResult {
  id                                   String @id @unique @default(uuid())
  //resultKey String @default(uuid())
  formationsQualification              Float
  techniquesRecognitionsQualifications Float
  qualification                        Float  @default(0.0)

  fk_patrol String @unique
  patrol    Patrol @relation(fields: [fk_patrol], references: [id], onDelete: Cascade)
}

model AmbushResult {
  id            String @id @unique @default(uuid())
  formation     String
  qualification Float  @default(0.0)

  fk_patrol String @unique
  patrol    Patrol @relation(fields: [fk_patrol], references: [id], onDelete: Cascade)
}

model CombatResult {
  id              String  @id @unique @default(uuid())
  q_enemies       Int
  q_friend_deaths Int
  q_enemy_deaths  Int
  qualification   Float   @default(0.0)
  totalSeconds    Int     @default(0)
  player_dead     Boolean @default(false)

  fk_patrol String @unique
  patrol    Patrol @relation(fields: [fk_patrol], references: [id], onDelete: Cascade)
}
